# -*- coding: utf-8 -*-
"""DataVisualizationAssignment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ye5_WKN4iONBFZoNU7OqQ19kHMfvHzc2
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load your dataset
df = pd.read_csv('gdp_pcap_Assignment1.csv')

# Get the list of countries from the dataset
valid_countries = df['country'].unique().tolist()

# Define function to plot GDP
def plot_gdp_for_country(country_name, start_year, end_year):
    # Filter the row for the selected country
    country_data = df[df['country'] == country_name]

    # Ensure the country exists in the dataset
    if country_data.empty:
        print(f"Country '{country_name}' not found in the dataset!")
        return

    # Slice the year columns
    years = [str(year) for year in range(start_year, end_year + 1)]
    gdp_values = country_data[years].values.flatten()  # Convert to 1D array

    # Plot GDP over time
    plt.figure(figsize=(10, 6))
    plt.plot(range(start_year, end_year + 1), gdp_values, marker='o', label=country_name)
    plt.title(f'GDP Improvement Over Time: {country_name}')
    plt.xlabel('Year')
    plt.ylabel('GDP')
    plt.legend()
    plt.grid(True)
    plt.show()

# Display valid countries
print("Available countries:", ", ".join(valid_countries))

# User inputs
while True:
    country_name = input("Enter a country name from the list above: ")
    if country_name in valid_countries:
        break
    print("Invalid country name. Please select from the list provided.")

while True:
    try:
        start_year = int(input("Enter start year: "))
        end_year = int(input("Enter end year: "))
        if str(start_year) in df.columns and str(end_year) in df.columns and start_year <= end_year:
            break
        print("Invalid years. Please enter valid years within the dataset (1800 - 2100).")
    except ValueError:
        print("Please enter numeric values for the years.")

# Plot the graph
plot_gdp_for_country(country_name, start_year, end_year)

!pip install plotly
!pip install ipywidgets
!pip install ipywidgets plotly
!pip install -U kaleido

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from google.colab import files

# Load your dataset
df = pd.read_csv('gdp_pcap_Assignment1.csv')

# Get the list of unique countries and range of years
valid_countries = df['country'].unique()
valid_years = [int(year) for year in df.columns if year.isdigit()]

# Helper function to abbreviate country names (first 3 letters)
def abbreviate_country_names(name):
    return name[:3].upper()

# Function to calculate percentage growth
def calculate_percentage_growth(data, start_year, end_year):
    """Calculate percentage growth between start and end years for each country."""
    data['Percentage Growth'] = (
        ((data[end_year] - data[start_year]) / data[start_year]) * 100
    ).round(2)
    return data

# Function to generate selected chart
def plot_chart(chart_type, mode, country_name, start_year, end_year):
    # Slice the year columns
    years = [str(year) for year in range(start_year, end_year + 1)]
    map_data = df.melt(
        id_vars=['country', 'continent'],
        value_vars=years,
        var_name='Year', value_name='GDP'
    )
    map_data['Year'] = map_data['Year'].astype(int)  # Ensure 'Year' is an integer column

    # Handle Line Chart visualization
    if chart_type == 'Line Chart':
        if mode == "Country-wise":
            # Filter data for the selected country
            country_data = df[df['country'] == country_name]

            # Calculate percentage growth
            country_data = calculate_percentage_growth(country_data, str(start_year), str(end_year))

            # Reshape data for line chart
            plot_data = map_data[map_data['country'] == country_name]

            # Create a line chart
            fig = px.line(
                plot_data,
                x='Year',
                y='GDP',
                title=f"{country_name}: GDP Over Time ({start_year}-{end_year})\nPercentage Growth: {country_data['Percentage Growth'].values[0]}%",
                labels={'GDP': 'GDP (in billions)', 'Year': 'Year'},
                color_discrete_sequence=['#006400']  # Line color
            )

            # Adjust layout for clarity
            fig.update_layout(
                title=dict(
                    text=f"{country_name}: GDP Over Time ({start_year}-{end_year})\nPercentage Growth: {country_data['Percentage Growth'].values[0]}%",
                    font=dict(size=24)  # Larger title font size
                ),
                xaxis=dict(title='Year', showgrid=True, gridcolor='LightGrey'),
                yaxis=dict(title='GDP (in billions)', showgrid=True, gridcolor='LightGrey'),
                plot_bgcolor='#DBDBDB',
                paper_bgcolor='#DBDBDB'
            )

        elif mode == "Continent-wise":
            # Aggregate GDP data for continents
            continent_data = map_data.groupby(['continent', 'Year'])['GDP'].sum().reset_index()

            # Create a line chart for continents
            fig = px.line(
                continent_data,
                x='Year',
                y='GDP',
                color='continent',
                title=f"Global GDP by Continent ({start_year}-{end_year})",
                labels={'GDP': 'GDP (in billions)', 'Year': 'Year', 'continent': 'Continent'},
                color_discrete_sequence=px.colors.qualitative.Set1  # Default color scheme
            )

            # Adjust layout for clarity
            fig.update_layout(
                title=dict(
                    text=f"Global GDP by Continent ({start_year}-{end_year})",
                    font=dict(size=24)  # Larger title font size
                ),
                xaxis=dict(title='Year', showgrid=True, gridcolor='LightGrey'),
                yaxis=dict(title='GDP (in billions)', showgrid=True, gridcolor='LightGrey'),
                plot_bgcolor='#DBDBDB',
                paper_bgcolor='#DBDBDB'
            )

        else:
            print("Invalid mode for line chart visualization!")
            return

        # Display the chart
        fig.show()

        # Save the chart as a high-quality image
        # fig.write_image(f"{country_name}_gdp_growth.png", format="png", width=1920, height=1080, scale=4)
        # files.download(f"{country_name}_gdp_growth.png")

    else:
        print("Chart type not supported!")
        return


# Interactive Console Inputs
print("Available countries:", ", ".join(valid_countries))
print(f"Available years: {min(valid_years)} to {max(valid_years)}")

# Get user input for mode (Country-wise or Continent-wise)
modes = ['Country-wise', 'Continent-wise']
print("Available modes:", ", ".join(modes))
selected_mode = input("Choose the mode (Country-wise or Continent-wise): ").strip()
while selected_mode not in modes:
    print("Invalid mode. Please choose from the list.")
    selected_mode = input("Choose the mode (Country-wise or Continent-wise): ").strip()

# Get user input for country (only if Country-wise analysis is selected)
selected_country = None
if selected_mode == 'Country-wise':
    selected_country = input("Enter the country name: ").strip()
    while selected_country.lower() not in [country.lower() for country in valid_countries]:
        print("Invalid country name. Please choose from the list.")
        selected_country = input("Enter the country name: ").strip()

    # Ensure matching case for input and dataset
    selected_country = next(country for country in valid_countries if country.lower() == selected_country.lower())

# Get user input for start year and end year
while True:
    try:
        selected_start_year = int(input(f"Enter the start year (between {min(valid_years)} and {max(valid_years)}): "))
        selected_end_year = int(input(f"Enter the end year (between {min(valid_years)} and {max(valid_years)}): "))

        # Check if the input years are valid
        if selected_start_year < min(valid_years) or selected_end_year > max(valid_years) or selected_start_year > selected_end_year:
            print(f"Invalid year range. Start year must be between {min(valid_years)} and {max(valid_years)}, "
                  f"end year must be between {min(valid_years)} and {max(valid_years)}, and start year cannot be after the end year.")
        else:
            break  # Exit the loop if inputs are valid
    except ValueError:
        print("Invalid input. Please enter numeric values for years.")

# Get user input for chart type
chart_types = ['Line Chart', 'Scatter Plot', 'Bar Chart', 'Map']
print("Available chart types:", ", ".join(chart_types))
selected_chart_type = input("Enter the chart type: ").strip()
while selected_chart_type not in chart_types:
    print("Invalid chart type! Please choose from the list.")
    selected_chart_type = input("Enter the chart type: ").strip()

# Plot the chart
plot_chart(selected_chart_type, selected_mode, selected_country, selected_start_year, selected_end_year)

# ======================================================================================

import pandas as pd
import plotly.express as px

# Load dataset
df = pd.read_csv('gdp_pcap_Assignment1.csv')

# Extract available years
valid_years = sorted([int(year) for year in df.columns if year.isdigit()])

# Set default year
default_year = max(valid_years)
map_data = df[['country', str(default_year)]].rename(columns={str(default_year): 'GDP'})

# Define custom green gradient color scale
custom_colors = [
    [0, "#026803"],  # Dark Green
    [0.25, "#2EA436"],
    [0.5, "#49CA54"],
    [0.75, "#AAE9B2"],
    [1, "#D0DBD2"]   # Light Green
]

# Create choropleth map with custom colors
fig = px.choropleth(
    map_data,
    locations='country',
    locationmode='country names',
    color='GDP',
    hover_name='country',
    color_continuous_scale=custom_colors,  # Apply gradient
    title=f"Global GDP Distribution ({default_year})",
    labels={'GDP': 'GDP (in billions)', 'country': 'Country'}
)

# Adjust layout for background and width
fig.update_layout(
    width=1000,
    geo=dict(
        showframe=False,
        showcoastlines=False,
        projection_type='equirectangular',
        bgcolor='#DBDBDB'  # Match background
    ),
    plot_bgcolor='#DBDBDB',
    paper_bgcolor='#DBDBDB',
    updatemenus=[  # Dropdown to select year
        dict(
            buttons=[
                dict(
                    label=str(year),
                    method="update",
                    args=[
                        {"z": [df[str(year)]]},
                        {"title": f"Global GDP Distribution ({year})"}
                    ]
                ) for year in valid_years
            ],
            direction="down",
            showactive=True
        )
    ]
)

# Show the map
fig.show()

# ===========================================================

import pandas as pd
import matplotlib.pyplot as plt

# Load your dataset
df = pd.read_csv('gdp_pcap_Assignment1.csv')

# Select a sample of the dataset (e.g., first 5 rows, including country and some year columns)
sample_columns = ['country', 'continent', 'Population'] + [str(year) for year in range(2000, 2005)]  # Adjust years as needed
sample_df = df[sample_columns].head()

# Print the sample for verification
print(sample_df)

# Save the sample as a screenshot-like image
fig, ax = plt.subplots(figsize=(10, 3))  # Adjust size as needed
ax.axis('tight')
ax.axis('off')
table = ax.table(cellText=sample_df.values, colLabels=sample_df.columns, loc='center')
plt.savefig('raw_dataset_sample.png', dpi=300)  # Saves the table as a PNG image
plt.show()


# ===========================================

import pandas as pd
import plotly.express as px

# Load your dataset
df = pd.read_csv('gdp_pcap_Assignment1.csv')

# Ensure the dataset has a 'continent' column and group by continent
if 'continent' in df.columns:
    # Count the number of countries per continent
    countries_per_continent = df.groupby('continent')['country'].nunique().reset_index()
    countries_per_continent.rename(columns={'country': 'Number of Countries'}, inplace=True)

    # Print the table for reference
    print(countries_per_continent)

    # Create a bar chart
    fig = px.bar(
        countries_per_continent,
        x='continent',
        y='Number of Countries',
        title='Number of Countries per Continent',
        labels={'continent': 'Continent', 'Number of Countries': 'Number of Countries'},
        template='plotly_white'
    )
    # Display the chart
    fig.show()

    # Save the figure as a static image (optional, requires installation of kaleido)
    # fig.write_image('countries_per_continent.png')
else:
    print("The dataset does not contain a 'continent' column.")


# ===========================================


import pandas as pd
import matplotlib.pyplot as plt

# Load your dataset
df = pd.read_csv('gdp_pcap_Assignment1.csv')

# Select a subset of the dataset (e.g., first 5 rows and first few years)
columns_to_display = ['country', 'continent', 'Population', 'Land Area (P/KM2)'] + [str(year) for year in range(2000, 2005)]  # Adjust years as needed
subset_df = df[columns_to_display].head()

# Print the subset for reference
print(subset_df)

# Create a table as a figure
fig, ax = plt.subplots(figsize=(12, 4))  # Adjust figure size as needed
ax.axis('tight')
ax.axis('off')
table = ax.table(cellText=subset_df.values, colLabels=subset_df.columns, loc='center', cellLoc='center')

# Save the table as an image for the report
plt.savefig('wide_format_sample.png', dpi=300)  # Saves the figure as a high-resolution PNG file
plt.show()

